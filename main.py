from pyrogram import Client, filters
import asyncio
import re
from datetime import datetime, timedelta, timezone
import httpx

api_id = 22542996
api_hash = "8c7436fa7797dd4527f001a3ff59f269"

app = Client("my_account", api_id=api_id, api_hash=api_hash)

letters = {
    " ": "000000000000\n000000000000\n000000000000\n000000000000\n000000000000\n000000000000\n000000000000\n000000000000\n000000000000\n000000000000\n000000000000\n000000000000",
    "a": "000000000000\n000001100000\n000011110000\n000111111000\n001110011100\n001100001100\n001100001100\n001111111100\n001111111100\n001100001100\n001100001100\n000000000000",
    "b": "000000000000\n001111111000\n001111111100\n001100001100\n001100001100\n001111111000\n001111111000\n001100001100\n001100001100\n001111111100\n001111111000\n000000000000",
    "c": "000000000000\n000111111000\n001111111100\n001100001100\n001100000000\n001100000000\n001100000000\n001100000000\n001100001100\n001111111100\n000111111000\n000000000000",
    "d": "000000000000\n001111111000\n001111111100\n000110001100\n000110001100\n000110001100\n000110001100\n000110001100\n000110001100\n001111111100\n001111111000\n000000000000",
    "e": "000000000000\n001111111000\n001111111000\n001100000000\n001100000000\n001111110000\n001111110000\n001100000000\n001100000000\n001111111000\n001111111000\n000000000000",
    "f": "000000000000\n000111111000\n001111111000\n001100000000\n001100000000\n001111110000\n001111110000\n001100000000\n001100000000\n001100000000\n001100000000\n000000000000",
    "g": "000000000000\n000111111000\n001111111100\n001100000000\n001100000000\n001100111100\n001100111100\n001100001100\n001100001100\n001111111100\n000111111000\n000000000000",
    "h": "000000000000\n001100001100\n001100001100\n001100001100\n001100001100\n001111111100\n001111111100\n001100001100\n001100001100\n001100001100\n001100001100\n000000000000",
    "i": "000000000000\n001111111100\n001111111100\n000001100000\n000001100000\n000001100000\n000001100000\n000001100000\n000001100000\n001111111100\n001111111100\n000000000000",
    "j": "000000000000\n000111111100\n000111111100\n000000011000\n000000011000\n000000011000\n000000011000\n001100011000\n001100011000\n001111111000\n000111110000\n000000000000",
    "k": "000000000000\n001100001100\n001100011100\n001100111000\n001101110000\n001111100000\n001111100000\n001101110000\n001100111000\n001100011100\n001100001100\n000000000000",
    "l": "000000000000\n001100000000\n001100000000\n001100000000\n001100000000\n001100000000\n001100000000\n001100000000\n001100000000\n001111111100\n001111111100\n000000000000",
    "m": "000000000000\n001100001100\n001110011100\n001111111100\n001111111100\n001101101100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n000000000000",
    "n": "000000000000\n001100001100\n001110001100\n001111001100\n001111101100\n001101111100\n001100111100\n001100011100\n001100001100\n001100001100\n001100001100\n000000000000",
    "o": "000000000000\n000111111000\n001111111100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001111111100\n000111111000\n000000000000",
    "p": "000000000000\n001111111000\n001111111100\n001100001100\n001100001100\n001111111100\n001111111000\n001100000000\n001100000000\n001100000000\n001100000000\n000000000000",
    "q": "000000000000\n000111111000\n001111111100\n001100001100\n001100001100\n001100001100\n001101101100\n001101111100\n001100111000\n001111111100\n000111101100\n000000000000",
    "r": "000000000000\n001111111000\n001111111100\n001100001100\n001100001100\n001111111100\n001111111000\n001100011100\n001100001100\n001100001100\n001100001100\n000000000000",
    "s": "000000000000\n000111111000\n001111111100\n001100001100\n001100000000\n001111111000\n000111111100\n000000001100\n001100001100\n001111111100\n000111111000\n000000000000",
    "t": "000000000000\n001111111100\n001111111100\n000001100000\n000001100000\n000001100000\n000001100000\n000001100000\n000001100000\n000001100000\n000001100000\n000000000000",
    "u": "000000000000\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001111111100\n000111111000\n000000000000",
    "v": "000000000000\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001110011100\n000111111000\n000011110000\n000001100000\n000000000000",
    "w": "000000000000\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001101101100\n001111111100\n001111111100\n001110011100\n001100001100\n000000000000",
    "x": "000000000000\n001100001100\n001100001100\n001110011100\n000111011000\n000011110000\n000011110000\n000110111000\n001110011100\n001100001100\n001100001100\n000000000000",
    "y": "000000000000\n001100001100\n001100001100\n001100001100\n001100001100\n001111111100\n000111111100\n000000001100\n000000001100\n001111111100\n001111111000\n000000000000",
    "z": "000000000000\n001111111100\n001111111100\n000000011100\n000000111000\n000001110000\n000011100000\n000111000000\n001110000000\n001111111100\n001111111100\n000000000000",
    "а": "000000000000\n000001100000\n000011110000\n000111111000\n001110011100\n001100001100\n001100001100\n001111111100\n001111111100\n001100001100\n001100001100\n000000000000",
    "б": "000000000000\n001111111000\n001111111000\n001100000000\n001100000000\n001111111000\n001111111100\n001100001100\n001100001100\n001111111100\n001111111000\n000000000000",
    "в": "000000000000\n001111111000\n001111111100\n001100001100\n001100001100\n001111111000\n001111111000\n001100001100\n001100001100\n001111111100\n001111111000\n000000000000",
    "г": "000000000000\n000011111100\n000111111100\n000110000000\n000110000000\n000110000000\n000110000000\n000110000000\n000110000000\n000110000000\n000110000000\n000000000000",
    "д": "000000000000\n000001111000\n000011111100\n000111001100\n001110001100\n001100001100\n001111111100\n011111111110\n011100001110\n011000000110\n011000000110\n000000000000",
    "е": "000000000000\n001111111000\n001111111000\n001100000000\n001100000000\n001111110000\n001111110000\n001100000000\n001100000000\n001111111000\n001111111000\n000000000000",
    "ё": "000000000000\n001111111000\n001111111000\n001100000000\n001100000000\n001111110000\n001111110000\n001100000000\n001100000000\n001111111000\n001111111000\n000000000000",
    "ж": "000000000000\n001101101100\n001101101100\n001111111100\n000111111000\n000011110000\n000011110000\n000111111000\n001111111100\n001101101100\n001101101100\n000000000000",
    "з": "000000000000\n000111111000\n001111111100\n001100001100\n000000001100\n000001111000\n000001111000\n000000001100\n001100001100\n001111111100\n000111111000\n000000000000",
    "и": "000000000000\n001100001100\n001100001100\n001100011100\n001100111100\n001101111100\n001111101100\n001111001100\n001110001100\n001100001100\n001100001100\n000000000000",
    "й": "000000000000\n001101101100\n001100001100\n001100011100\n001100111100\n001101111100\n001111101100\n001111001100\n001110001100\n001100001100\n001100001100\n000000000000",
    "к": "000000000000\n001100001100\n001100011100\n001100111000\n001101110000\n001111100000\n001111100000\n001101110000\n001100111000\n001100011100\n001100001100\n000000000000",
    "л": "000000000000\n000001100000\n000011110000\n000111111000\n001110011100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n000000000000",
    "м": "000000000000\n001100001100\n001110011100\n001111111100\n001111111100\n001101101100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n000000000000",
    "н": "000000000000\n001100001100\n001100001100\n001100001100\n001100001100\n001111111100\n001111111100\n001100001100\n001100001100\n001100001100\n001100001100\n000000000000",
    "о": "000000000000\n000111111000\n001111111100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001111111100\n000111111000\n000000000000",
    "п": "000000000000\n001111111100\n001111111100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n000000000000",
    "р": "000000000000\n001111111000\n001111111100\n001100001100\n001100001100\n001111111100\n001111111000\n001100000000\n001100000000\n001100000000\n001100000000\n000000000000",
    "с": "000000000000\n000111111000\n001111111100\n001100001100\n001100000000\n001100000000\n001100000000\n001100000000\n001100001100\n001111111100\n000111111000\n000000000000",
    "т": "000000000000\n001111111100\n001111111100\n000001100000\n000001100000\n000001100000\n000001100000\n000001100000\n000001100000\n000001100000\n000001100000\n000000000000",
    "у": "000000000000\n001100001100\n001100001100\n001100001100\n001100001100\n001111111100\n000111111100\n000000001100\n000000001100\n001111111100\n001111111000\n000000000000",
    "ф": "000000000000\n000111111000\n001111111100\n011001100110\n011001100110\n011001100110\n001111111100\n000111111000\n000001100000\n000001100000\n000001100000\n000000000000",
    "х": "000000000000\n001100001100\n001100001100\n001110011100\n000111011000\n000011110000\n000011110000\n000110111000\n001110011100\n001100001100\n001100001100\n000000000000",
    "ц": "000000000000\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001111111110\n000111111110\n000000000110\n000000000000",
    "ч": "000000000000\n001100001100\n001100001100\n001100001100\n001100001100\n001100001100\n001111111100\n000111111100\n000000001100\n000000001100\n000000001100\n000000000000",
    "ш": "000000000000\n001100001100\n001100001100\n001100001100\n001101101100\n001101101100\n001101101100\n001101101100\n001101101100\n001111111100\n001111111100\n000000000000",
    "щ": "000000000000\n001100001100\n001100001100\n001100001100\n001101101100\n001101101100\n001101101100\n001101101100\n001111111110\n001111111110\n000000000110\n000000000000",
    "ь": "000000000000\n001100000000\n001100000000\n001100000000\n001100000000\n001111111000\n001111111100\n001100001100\n001100001100\n001111111100\n001111111000\n000000000000",
    "ъ": "000000000000\n011100000000\n011100000000\n001100000000\n001100000000\n001111111000\n001111111100\n001100001100\n001100001100\n001111111100\n001111111000\n000000000000",
    "ы": "000000000000\n001100001100\n001100001100\n001100001100\n001100001100\n001111101100\n001111111100\n001100011100\n001100011100\n001111111100\n001111101100\n000000000000",
    "э": "000000000000\n000111111000\n001111111100\n001100001100\n000000001100\n000011111100\n000011111100\n000000001100\n001100001100\n001111111100\n000111111000\n000000000000",
    "ю": "000000000000\n011001111100\n011011111110\n011011000110\n011011000110\n011111000110\n011111000110\n011011000110\n011011000110\n011011111110\n011001111100\n000000000000",
    "я": "000000000000\n000111111100\n001111111100\n001100001100\n001100001100\n001111111100\n000111111100\n000000111100\n000001111100\n000011101100\n000111001100\n000000000000",
    ".": "000000000000\n000000000000\n000000000000\n000000000000\n000000000000\n000000000000\n000000000000\n000000000000\n000000000000\n000001100000\n000001100000\n000000000000",
    "!": "000000000000\n000001100000\n000001100000\n000001100000\n000001100000\n000001100000\n000001100000\n000000000000\n000000000000\n000001100000\n000001100000\n000000000000",
    "💖": "000000000000\n001110011100\n011🤍11111110\n01🤍111111110\n011111111110\n011111111110\n011111111110\n001111111100\n000111111000\n000011110000\n000001100000\n000000000000",
}


symbols = ["✨", "💖"]  # 0 -> ✨, 1 -> 💖

# /clickreact buyrug'i
@app.on_message(filters.me & filters.private & filters.command("reactAll"))
async def click_react_handler(client, message):
    chat = message.chat
    my_id = message.from_user.id

    await message.reply("⏳ reaksiyalar bosilmoqda...")

    async for msg in app.get_chat_history(chat.id, limit=100):
        if msg.from_user and msg.from_user.id != my_id:
            try:
                await app.send_reaction(
                    chat_id=chat.id,
                    message_id=msg.id,
                    emoji="❤️"
                )
                await asyncio.sleep(0.1)
            except Exception as e:
                print(f"Xatolik: {e}")

    await message.reply("✅ Hamma xabarga reaksiya bosildu.")

@app.on_message(filters.me & filters.private & filters.command("type"))
async def type_writer(client, message):
    if len(message.command) < 2:
        return await message.edit("❗ /type dan keyin matn yozing. Masalan: /type Hello world")

    full_text = message.text.split(maxsplit=1)[1]

    typed_text = ""
    for char in full_text:
        typed_text += char
        try:
            await message.edit(typed_text)
        except Exception as e:
            print(f"Xatolik: {e}")
        await asyncio.sleep(0.08)  # typing effekti


@app.on_message(filters.private & ~filters.me)
async def calculator(client, message):
    expression = message.text.strip().replace(" ", "")

    # Faqat raqam va +-*/. belgilariga ruxsat beramiz
    if not re.match(r'^[\d\+\-\*/\.]+$', expression):
        return

    try:
        result = eval(expression)
        await message.reply(f"🧮 Javob: {result}")
    except Exception as e:
        await message.reply("⚠️ Xatolik: noto‘g‘ri ifoda.")

import re

@app.on_message(filters.me & filters.command("flood"))
async def flood_handler(client, message):
    args = message.text.split(maxsplit=2)

    try:
        await message.delete()
    except Exception as e:
        print(f"❌ Buyruqni o‘chirishda xatolik: {e}")
    
    if len(args) < 3:
        await message.reply("❗ To‘g‘ri format:\n`/flood 3 hello there`")
        return

    try:
        count = int(args[1])
        if count > 50:
            await message.reply("🚫 Juda ko‘p! Maksimum 50 ta.")
            return
    except ValueError:
        await message.reply("⚠️ Raqam noto‘g‘ri.")
        return

    msg_text = args[2]

    for _ in range(count):
        await message.reply(msg_text)
        await asyncio.sleep(0.1)


# /mt komandasi uchun
@app.on_message(filters.me & filters.command("mt"))
async def magic_text(client, message):
    raw_text = message.text.split(maxsplit=1)
    if len(raw_text) < 2:
        await message.edit("❗ Format: /mt matn")
        return

    text = raw_text[1].lower()
    _last = ""
    
    # Dastlab ekranni tozalab boshlab yuboramiz
    await message.edit("⏳...")

    for letter in text:
        if letter == _last:
            await asyncio.sleep(0.5)
            continue

        if letter not in letters:
            await asyncio.sleep(0.5)
            continue

        pixel = letters[letter].replace("0", symbols[0]).replace("1", symbols[1])
        try:
            await message.edit(pixel)
        except Exception as e:
            print(f"Xatolik: {e}")
        await asyncio.sleep(0.6)
        _last = letter

    await asyncio.sleep(0.6)
    await message.edit(f"{symbols[0]}{symbols[1]}<b>{text}</b>{symbols[1]}{symbols[0]}")


async def get_andijan_weather():
    try:
        url = "https://api.open-meteo.com/v1/forecast?latitude=40.78&longitude=72.34&current_weather=true"
        async with httpx.AsyncClient() as client:
            resp = await client.get(url, timeout=10.0)
            data = resp.json()
            temp = data["current_weather"]["temperature"]
            code = data["current_weather"]["weathercode"]
            emoji = weather_code_to_emoji(code)
            return f"{emoji} Andijon: {temp}°C"
    except Exception as e:
        print("❌ Ob-havo xatosi:", e)
        return "🌐 Ob-havo topilmadi"

def weather_code_to_emoji(code: int) -> str:
    if code in [0]:
        return "☀️"  # Clear
    elif code in [1, 2]:
        return "🌤"  # Mostly clear
    elif code in [3]:
        return "☁️"  # Overcast
    elif code in [45, 48]:
        return "🌫"  # Fog
    elif code in [51, 53, 55, 61, 63, 65]:
        return "🌧"  # Rain
    elif code in [66, 67, 71, 73, 75, 77, 85, 86]:
        return "❄️"  # Snow
    elif code in [95, 96, 99]:
        return "⛈"  # Thunder
    else:
        return "🌡"  # Unknown

async def update_bio_loop():
    await app.start()
    print("📝 Bio + ob‑havo yangilanishi boshlandi...")

    while True:
        uzbekistan_tz = timezone(timedelta(hours=5))
        now = datetime.now(uzbekistan_tz)
        time_str = now.strftime("%H:%M")
        weather = await get_andijan_weather()
        bio_text = f"⏰ {time_str} • {weather}"

        try:
            await app.update_profile(bio=bio_text)
            print(f"✅ Bio yangilandi: {bio_text}")
        except Exception as e:
            print(f"⚠️ Xatolik: {e}")

        seconds_to_next_minute = 60 - now.second
        await asyncio.sleep(seconds_to_next_minute)
        

# Barcha komandalarni kutib turadi (kerak bo‘lsa boshqa handlerlar ham shu yerda ishlaydi)
@app.on_message()
async def dummy(_, __):
    pass

# Ishga tushurish
if __name__ == "__main__":
    app.run(update_bio_loop())
